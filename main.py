import logging
import asyncio
import os
from datetime import datetime, timedelta
import random
import sqlite3

import openai
from cryptography.fernet import Fernet
import nest_asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ChatAction

# Apply nest_asyncio for nested event loops
nest_asyncio.apply()
logging.basicConfig(level=logging.INFO)

# Load environment variables
load_dotenv()

# Function to decrypt keys
def load_encrypted_key(env_var_name: str, encryption_key: bytes) -> str:
    try:
        encrypted_value = os.getenv(env_var_name)
        if not encrypted_value:
            raise ValueError(f"{env_var_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env —Ñ–∞–π–ª–µ.")
        cipher_suite = Fernet(encryption_key)
        return cipher_suite.decrypt(encrypted_value.encode()).decode()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ {env_var_name}: {e}")
        raise

# Your encryption key (32 URL-safe Base64-encoded bytes)
ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY").encode()

# Load keys
try:
    TELEGRAM_TOKEN = load_encrypted_key("ENCRYPTED_TELEGRAM_TOKEN", ENCRYPTION_KEY)
    OPENAI_API_KEY = load_encrypted_key("ENCRYPTED_OPENAI_API_KEY", ENCRYPTION_KEY)
    openai.api_key = OPENAI_API_KEY
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π: {e}")
    raise SystemExit("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏.")

# APScheduler for reminders
scheduler = AsyncIOScheduler()

# Task storage
tasks = {}

# Initialize database
# Initialize database
def initialize_db():
    conn = sqlite3.connect("bot_data.db")
    cursor = conn.cursor()

    # Create the table if it does not exist
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS interactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL, -- Ensure the user_id column exists
            category TEXT NOT NULL,
            user_message TEXT NOT NULL,
            bot_response TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # Check and add missing columns dynamically
    cursor.execute("PRAGMA table_info(interactions)")
    columns = {col[1] for col in cursor.fetchall()}
    if "user_id" not in columns:
        cursor.execute("ALTER TABLE interactions ADD COLUMN user_id INTEGER NOT NULL")
    if "category" not in columns:
        cursor.execute("ALTER TABLE interactions ADD COLUMN category TEXT NOT NULL")
    if "user_message" not in columns:
        cursor.execute("ALTER TABLE interactions ADD COLUMN user_message TEXT NOT NULL")
    if "bot_response" not in columns:
        cursor.execute("ALTER TABLE interactions ADD COLUMN bot_response TEXT NOT NULL")
    conn.commit()
    conn.close()


def save_interaction(user_id, category, user_message, bot_response):
    conn = sqlite3.connect("bot_data.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO interactions (user_id, category, user_message, bot_response)
        VALUES (?, ?, ?, ?)
    """, (user_id, category, user_message, bot_response))
    conn.commit()
    conn.close()

def get_user_queries(user_id, category):
    conn = sqlite3.connect("bot_data.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT user_message, bot_response FROM interactions
        WHERE user_id = ? AND category = ?
    """, (user_id, category))
    rows = cursor.fetchall()
    conn.close()
    return rows

# Menu function
async def main_menu():
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="programming")],
        [InlineKeyboardButton("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="database")],
        [InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫", callback_data="diary")],
        [InlineKeyboardButton("–ë–æ–ª—Ç–∞–ª–∫–∞", callback_data="chat")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def animated_start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1)
    keyboard = await main_menu()
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

# Button handler
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = query.data
    context.user_data["current_category"] = category

    if category == "programming":
        await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")
    elif category == "database":
        await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    elif category == "diary":
        await diary_menu(update, context)
    elif category == "chat":
        await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ë–æ–ª—Ç–∞–ª–∫–∞. –ü—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º!")

# Diary function
async def diary_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–ó–∞–¥–∞—á–∞ | 2024-12-30 15:00`", parse_mode="Markdown")
    context.user_data['diary'] = True

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('diary'):
        return

    try:
        task_text, task_time = update.message.text.split("|")
        task_datetime = datetime.strptime(task_time.strip(), "%Y-%m-%d %H:%M")
        reminder_time = task_datetime - timedelta(minutes=30)

        scheduler.add_job(
            send_reminder,
            trigger=DateTrigger(run_date=reminder_time),
            args=[context, update.message.chat_id, task_text.strip()],
        )
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text.strip()}\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤: {reminder_time.strftime('%Y-%m-%d %H:%M')}")
        context.user_data['diary'] = False
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")

async def send_reminder(context: ContextTypes.DEFAULT_TYPE, chat_id: int, task_text: str):
    await context.bot.send_message(chat_id=chat_id, text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task_text}")

# Handle text messages based on category
async def start_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    if user_message.lower() in ["start", "üöÄ —Å—Ç–∞—Ä—Ç"]:
        keyboard = await main_menu()
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
        return

    current_category = context.user_data.get("current_category")

    if current_category == "programming":
        await handle_programming_question(update, context, user_message)
    elif current_category == "database":
        await handle_database_question(update, context, user_message)
    elif current_category == "chat":
        await handle_chat(update, context, user_message)
    else:
        keyboard = await main_menu()
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é!", reply_markup=keyboard)

async def handle_programming_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_message: str):
    user_id = update.message.chat_id
    previous_queries = get_user_queries(user_id, "programming")

    context_text = "\n".join([f"–í–æ–ø—Ä–æ—Å: {q[0]} –û—Ç–≤–µ—Ç: {q[1]}" for q in previous_queries])
    prompt = f"""
    –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. –í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{context_text}\n
    –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n{user_message}
    """

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é."},
                {"role": "user", "content": prompt},
            ],
        )
        bot_reply = response["choices"][0]["message"]["content"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        save_interaction(user_id, "programming", user_message, bot_reply)

        await update.message.reply_text(bot_reply)
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def handle_database_question(update: Update, context: ContextTypes.DEFAULT_TYPE, user_message: str):
    await update.message.reply_text(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –Ω–æ –≤–∞—à –≤–æ–ø—Ä–æ—Å: {user_message}")

async def handle_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, user_message: str):
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º."},
                {"role": "user", "content": user_message},
            ],
        )
        bot_reply = response["choices"][0]["message"]["content"]
        await update.message.reply_text(bot_reply)
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# Main function
async def main():
    initialize_db()
    scheduler.start()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", animated_start_menu))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start_button_handler))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())